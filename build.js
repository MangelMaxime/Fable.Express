#!/usr/bin/env node

const yargs = require('yargs')
const { hideBin } = require('yargs/helpers')
const concurrently = require('concurrently')
const path = require("path")
const fs = require('fs').promises
const fg = require("fast-glob")

const cleanCompiledFiles = async function () {
    const entries =
        await fg([
            "src/**/*.fs.js",
            "tests/**/*.fs.js"
        ], { dot: true });

    // Delete all the files generated by Fable
    for (const entry of entries) {
        await fs.unlink(entry)
    }

    // Delete fable cache folder
    await fs.rm("./tests/.fable", { recursive: true, force: true })
}

// Watch handler
const watchHandler = async function (argv) {
    await cleanCompiledFiles();

    const mochaPattern = argv.pattern || 'tests/';

    concurrently(
        [
            {
                command: `nodemon --inspect --watch tests --exec "npx mocha -r esm -r tests/env.js --recursive ${mochaPattern}"`,
            },
            {
                // There is a bug in concurrently where cwd in command options is not taken into account
                // Waiting for https://github.com/kimmobrunfeldt/concurrently/pull/266 to merge
                command: "cd tests && dotnet fable Tests.fsproj --watch",
                name: "cmd2",
                cwd: path.resolve(__dirname, "tests")
            }
        ],
        {
            prefix: "none" // Disable name prefix
        }
    )
}

yargs(hideBin(process.argv))
    .completion()
    .strict()
    .help()
    .alias("help", "h")
    .command(
        "watch",
        "Start Fable and mocha in watch mode. You should use this target when working on the bindings",
        (argv) => {
            argv
            .option(
                "pattern",
                {
                    description:
                        `Pattern used to determine which tests are run by mocha.
                        By default, we run all the tests but if you want to focus on the tests of Mime only you can pass '--pattern tests/Mime/'`,
                    type: "string"
                }
            )
        },
        watchHandler
    )
    .version(false)
    .argv
